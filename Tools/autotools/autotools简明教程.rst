automake工作流程
=================
用到的工具
----------------
- autoscan: 生成configure.scan文件，修改后将其重命名为configure.ac。
- m4: 一个宏处理器，语法与C中的宏相似。
- autoconf: 调用m4，将configure.ac中的宏展开，自动生成configure脚本。
- aclocal: 根据configure.ac生成automake运行所需的aclocal.m4。
- autoheader: 生成automake所需的config.h.in。
- config.h: normally generated by the ./configure script to reflect the target system's characteristics.

目录结构：
---------------
::

    ├── conf
    └── src
        ├── hello.c
        ├── hello.h
        └── main.c

构建步骤
--------------
1.autoscan
++++++++++++++
在hello目录里运行autoscan，得到configure.scan：

::

    AC_PREREQ([.])
    AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])
    AC_CONFIG_SRCDIR([src/hello.c])
    AC_CONFIG_HEADERS([config.h])
    
    # Checks for programs.
    AC_PROG_CC
    
    # Checks for libraries.
    
    # Checks for header files.

configure.scan:

- AC_PREREQ宏声明本文件要求的autoconf版本，本例使用的版本为2.69
- AC_INIT宏用来定义软件的名称和版本等信息，”FULL-PACKAGE-NAME”为软件包名称，”VERSION”为软件版本号，”BUG-REPORT-ADDRESS”为BUG报告地址（一般为软件作者邮件地址）。
- AC_CONFIG_SRCDIR宏用来侦测所指定的源码文件是否存在，来确定源码目录的有效性。指定源码目录下任意一个文件即可，此处为src目录下的hello.c。
- AC_CONFIG_HEADER宏用于生成config.h文件，以便autoheader使用
- AC_PROG_CC用来指定编译器，如果不指定，选用默认gcc。类似的，AC_PROG_CPP可以检测C++编译器。
- AC_OUTPUT用来设定 configure 所要产生的文件，如果是Makefile，configure会把它检查出来的结果带入Makefile.in文件产生合适的Makefile。使用 automake时，还需要一些其他的参数，这些额外的宏用aclocal工具产生。

2.configure.scan => configure.ac
++++++++++++++++++++++++++++++++++++++
修改configure.scan，并重命名为configure.ac。结果如下：::

    AC_PREREQ([2.69])
    AC_INIT([hello], [1.0], [phantomcat47@gmail.com])
    AM_INIT_AUTOMAKE
    AC_CONFIG_SRCDIR([src/hello.c])
    AC_CONFIG_HEADERS([config.h])
    # Checks for programs.
    AC_PROG_CC
    # Checks for libraries.
    AC_CHECK_LIB(pthread, pthread_create)
    # Checks for header files.
    AC_CHECK_HEADERS(stdlib.h string.h pthread.h)
    # Make AC_OUTPUT create each file by copying an input file (by default file.in), substituting the output variable values 
    AC_CONFIG_FILES([Makefile src/Makefile])
    AC_OUTPUT

注意事项：

- 以前的语法AM_INIT_AUTOMAKE([PACKAGE], [VERSION])已经过时，现在的AM_INIT_AUTOMAKE应当只有一个参数，存放automake参数。例如tar的`configure.ac AM_INIT_AUTOMAKE([1.11 gnits tar-ustar dist-bzip2 dist-xz std-options silent-rules])

3.aclocal
+++++++++++++
运行aclocal，从configure.ac生成aclocal.m4。automake包含了一些autoconf的宏，可以被用在你的软件包中，实际上其中有些宏是必要的。这些宏必须要被定义在aclocal.m4文件中，否则autoconf将无法使用它们。aclocal就是一个自动生成aclocal.m4的工具。

4.autoconf
+++++++++++++
运行autoconf，从configure.ac/configure.in生成configure脚本

5.使用autoheader工具生成config.h.in文件
+++++++++++++++++++++++++++++++++++++++++
产生一个包含C语言#define语句的模版文件，以供configure脚本使用。

6.创建Makefile.am文件
+++++++++++++++++++++++
Makefile.am::

    SUBDIRS = src conf

src/Makefile.am::

    bin_PROGRAMS = hello
    hello_SOURCES = hello.c hello.h main.c

conf/Makefile.am::

    configdir = /etc
    dist_config_DATA = hello.conf # dist_ prefix means these files need to be distributed(included in the tarball)

7.运行automake
++++++++++++++
运行automake，用Makefile.am生成Makefile.in。

选项：

- -–add-missing   添加丢失的脚本
- --foreign       不检查NEWS，ChangeLog，AUTHORS等文件

8.运行./configure脚本
+++++++++++++++++++++
运行./configure，从Makefile.in生成Makefile

9.make && make install
++++++++++++++++++++++++
