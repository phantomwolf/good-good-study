/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package binarylifting;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class App {
    static int maxPow;
    static int[][] lift;
    static int[] lev;

    // p is the parent of u in the tree
    private static void dfs(List<List<Integer>> graph, int v, int p) {
        lift[v][0] = p;
        for (int pow = 1; pow <= maxPow; pow++) {
            lift[v][pow] = lift[lift[v][pow - 1]][pow - 1];
        }
        for (int w : graph.get(v)) {
            if (w != p) {
                lev[w] = lev[v] + 1;
                dfs(graph, w, v);
            }
        }
    }

    public static int lca(List<List<Integer>> graph, int u, int v) {
        // Let u be the lower one
        if (lev[u] < lev[v]) {
            int tmp = u;
            u = v;
            v = tmp;
        }
        // If v is an ancestor of u, the lca should be v
        int l = lev[u];
        int n = u;
        for (int pow = maxPow; pow >= 0; pow--) {
            if (l - (1 << pow) >= lev[v]) {
                l -= (1 << pow);
                n = lift[n][pow];
            }
        }
        if (n == v) {
            return v;
        }
        for (int pow = maxPow; pow >= 0; pow--) {
            if (lift[u][pow] != lift[v][pow]) {
                u = lift[u][pow];
                v = lift[v][pow];
            }
        }
        // u is the highest node which isn't lca
        return lift[u][0];
    }

    public static void main(String[] args) {
        int n = 9;
        List<List<Integer>> graph = new ArrayList<>(n);
        graph.add(Arrays.asList(1, 2, 3));         // 0
        graph.add(Arrays.asList(4));            // 1
        graph.add(Arrays.asList(5, 6, 7));      // 2
        graph.add(Arrays.asList(8));            // 3
        graph.add(new ArrayList<>());           // 4
        graph.add(new ArrayList<>());           // 5
        graph.add(new ArrayList<>());           // 6
        graph.add(new ArrayList<>());           // 7
        graph.add(new ArrayList<>());           // 8

        maxPow = (int) Math.ceil(Math.log(graph.size()) / Math.log(2));
        lev = new int[graph.size()];
        lift = new int[graph.size()][maxPow + 1];

        dfs(graph, 0, 0);
        int[][] inputs = {{0, 4}, {2, 6}, {5, 7}, {2, 8}, {4, 8}};
        for (int[] input : inputs) {
            int res = lca(graph, input[0], input[1]);
            System.out.printf("lca of %d and %d is: %d%n", input[0], input[1], res);
        }
    }
}
