外排序(External Sorting)
==================================
外排序（External sorting）是指能够处理极大量数据的排序算法。通常来说，外排序处理的数据不能一次装入内存，只能放在读写较慢的外存储器（通常是硬盘）上。外排序通常采用的是一种“排序-归并”的策略。在排序阶段，先读入能放在内存中的数据量，将其排序输出到一个临时文件，依此进行，将待排序数据组织为多个有序的临时文件。尔后在归并阶段将这些临时文件组合为一个大的有序文件，也即排序结果。

外归并排序
-----------------------
外归并排序(External merge sort)，一次读入尽可能多的数据，排序后写入临时文件，再次读入数据...最后，将所有的临时文件合并起来，生成一个结果文件。比如，要对900 MB的数据进行排序，但机器上只有100 MB的可用内存时，外归并排序按如下方法操作：

1. 读入100 MB的数据至内存中，用某种常规方式（如快速排序、堆排序、归并排序等方法）在内存中完成排序。
2. 将排序完成的数据写入磁盘。
3. 重复步骤1和2直到所有的数据都存入了不同的100 MB的块（临时文件）中。在这个例子中，有900 MB数据，单个临时文件大小为100 MB，所以会产生9个临时文件。
4. 读入每个临时文件（顺串）的前10 MB（ = 100 MB / (9块 + 1)）的数据放入内存中的输入缓冲区，最后的10 MB作为输出缓冲区。（实践中，将输入缓冲适当调小，而适当增大输出缓冲区能获得更好的效果。）
5. 执行九路归并算法，将结果输出到输出缓冲区。一旦输出缓冲区满，将缓冲区中的数据写出至目标文件，清空缓冲区。一旦9个输入缓冲区中的一个变空，就从这个缓冲区关联的文件，读入下一个10M数据，除非这个文件已读完。这是“外归并排序”能在主存外完成排序的关键步骤 -- 因为“归并算法”(merge algorithm)对每一个大块只是顺序地做一轮访问(进行归并)，每个大块不用完全载入主存。

额外的归并步骤
+++++++++++++++++
上述算法中，我们只用了一次K路归并排序，就将所有临时文件合并了，而并非像在内存中那样，每次合并2个子串，共进行logn次合并。这是因为，每次合并操作，都需要读取/写入每个元素到磁盘，而磁盘读写是很慢的。

但是又有另外一个问题，如果最后生成的临时文件非常多，而我们的内存又有限，那么我们就只能为每个临时文件建立一个很小的数组，每次只能读入一点点数据。我们都知道，要高效利用磁盘，需要一次读入/写入大量的数据。为了解决这个问题，我们可以每次将少量临时文件，合并成一些较大的临时文件。最后再将这些大的临时文件合并成最终的结果文件。

例如，我们需要排序50GB的数据，但只有100MB的内存，会生成500个临时文件。如果要一次合并500个临时文件，那我们需要设置500个数组，每次只能从一个临时文件读入一点点数据。因此，我们可以每次只合并25个临时文件，并生成较大的临时文件。最后，我们得到20个较大的临时文件。最后，我们将这20个文件合并，得到最终的结果。

性能调校
+++++++++++++++++
并行计算：

- 使用多个磁盘驱动器
- 多线程
- 异步I/O，在向磁盘读取/写入数据的同时进行排序
- 高速网络环境中，将数据分配给多个机器，来同时进行排序

提高硬件速度：

- 增大内存，减少磁盘读写次数
- 更快的外部存储设备，比如SSD
- 使用性能更优良个各种设备，比如使用多核心CPU和延迟时间更短的内存

提高软件速度：

- 对于某些特殊数据，在第一阶段的排序中使用基数排序
- 压缩输入输出文件和临时文件
