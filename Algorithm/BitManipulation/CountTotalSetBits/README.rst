统计从1到n的所有数中，有多少bit被设为1
===========================================================
给定一个正整数n，统计从1到n的所有数里，共有多少bit被设为1。

例如对于n = 3，共有1、2、3这三个数，它们的二进制表达形式为::

    1:  0001
    2:  0010
    3:  0011

共有1 + 1 + 2 = 4个bit被设为1。


naive方法
-----------------------------------------------
依次计算每个数中有多少个bit被设为1，最后加起来。最大的数n至多有ceiling(logn)个bit被设为1，其他的数中为1的bit不可能多于ceiling(logn)，因此算法时间复杂度为O(nlogn)。


高效方法
-----------------------------------------------
考虑n=6的情况，将所有数写成二进制模式，并将所有为1的bit分为左上、左下、右上、右下四个部分::

    0:      0|00
    1:      0|01
    2:      0|10
    3:      0|11
            ----
    4:      1|00
    5:      1|01
    6:      1|10

0中没有任何bit被设为1，所以不影响结果，我们写出来以便后续分析。把这4个部分中所有为1的bit的数量加起来，就是我们要求的结果了。

先看右上部分，共有2 * 4 = 8个bit位，其中一半为1，因此右上部分有4个1。计算方法：设右上部分的宽为b，从上到下为0..2^b - 1，共有2^b行，因此共有b * (2^b)个比特位。再除以2，共有b * (2^(b-1))个1。

再看左下角，该bit永远为1。那么有多少个呢？看右下角的范围是从0(00)到2(10)，共3个数，因此左下角的1共出现了3次。

只剩下右下部分，我们可以模仿上面的方法，将其分为4部分，递归地计算::

    右下部分:
        0|0
        0|1
        ---
        1|0
