翻转二叉树(左右)
====================================
将以下二叉树::

         4
       /   \
      2     7
     / \   / \
    1   3 6   9

左右翻转成::

         4
       /   \
      7     2
     / \   / \
    9   6 3   1


解答
---------------------------
对树进行先序遍历、后序遍历、层序遍历，访问到一个结点时，将其左右孩子交换即可。鉴于先序遍历比后序遍历易于实现，推荐先序遍历。

若采用先序遍历，树会被自顶向下翻转，首先是2 <=> 7，然后是6 <=> 9，最后是1 <=> 3。为什么6 <=> 9先与1 <=> 3被翻转呢？因为2与7交换以后，7变成了4的左孩子，所以我们会先访问7，然后才是2。

若采用后序遍历，树会自底向上翻转，首先是1 <=> 3，然后是6 <=> 9，最后是2 <=> 7。

为什么不推荐中序遍历？分析：中序遍历中，首先访问2的左孩子1，没什么好翻转的；然后是2本身，进行翻转1 <=> 3；最后应该访问2原本的右孩子3，然而此时3已经成了2的左孩子，造成了麻烦。

层序遍历也可以，但是要求的存储空间可能会比较多，所以不推荐。
