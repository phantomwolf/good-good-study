反转完美二叉树的奇数层
=======================================
给定一个完美二叉树::

               a
            /     \
           b       c
         /  \     /  \
        d    e    f    g
       / \  / \  / \  / \
      h  i j  k l  m  n  o 

轮流反转后的结果::

               a
            /     \
           c       b
         /  \     /  \
        d    e    f    g
       / \  / \  / \  / \
      o  n m  l k  j  i  h 

注意，root的属于第0层，所以是偶数层。

两次中序遍历
----------------------------
中序遍历二叉树，将所有奇数层的元素存入辅助数组。对于题目中的例子，数组内容为::

    {h, i, b, j, k, l, m, c, n, o}

将数组反转，现在数组内容为::

    {o, n, c, m, l, k, j, b, i, h}

再次中序遍历该树，每次遍历到奇数层的结点时，从辅助数组中取出一个元素用于替代该结点。

一次先序遍历(递归)
----------------------------
::

    preorder(root1->left, root2->right, lvl+1);
    preorder(root1->right, root2->left, lvl+1);

层序遍历
----------------------------
对树进行层序遍历(level-order traversal)。当辅助队列里只有奇数层的结点时(即第一次遇到该奇数层的结点时，比如第1层第一个结点，第3层第一个结点)，将队列中所有结点的key前后反转。之后继续进行层序遍历就行了。
